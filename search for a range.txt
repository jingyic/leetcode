class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> index;
        
        if(nums.size()==0) 
        {
            index.push_back(-1);
            index.push_back(-1);
            return index;}
        
        int left = 0;
        int right = nums.size()-1;
        int mid = left + (right-left)/2;
        
        while(left<=right)
        {
            mid = left + (right-left)/2;
            if(nums[mid]==target)
            {
                index.push_back(mid);
                index.push_back(mid);
                break;
                
            }
            else if(nums[mid]>target)
                right = mid-1;
            else
                left = mid+1;
        }
        if(nums[mid]!=target) 
        {
            index.push_back(-1);
            index.push_back(-1);
            return index;
        }
        left = 0;
        right = index[0];
        
        while(left<=right)
        {
            int mid = left+(right-left)/2;
            if(nums[mid]==target)
            {
                if(mid==0) 
                {
                    index[0] = 0;
                    break;
                }
                else if(nums[mid-1]!=target) 
                {
                    index[0] = mid;
                    break;
                }
                else 
                    right = mid-1;
                    
            }
            else if(nums[mid]<target)
            {
                left = mid+1;
            }
        }
        left = index[1];
        right = nums.size();
        while(left<=right)
        {
            int mid = left + (right-left)/2;
            if(nums[mid]==target)
            {
                if(mid == nums.size()-1)
                {
                    index[1] = nums.size()-1;
                    break;
                }
                else if(nums[mid+1]>target)
                {
                    index[1] = mid;
                    break;
                }
                else
                    left = mid+1;
            }
            else if(nums[mid]>target)
                right = mid-1;
        }
        return index;
    }
};